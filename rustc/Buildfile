PACKAGE="rustc"
VER="1.54.0"

DEPENDS=(   curl gcc glibc libssh2 openssl zlib  )
CONFLICTS=()

URL="https://static.rust-lang.org/dist/"
SRCDIR="${PACKAGE}-${VER}-src"
SRCTGZ="${SRCDIR}.tar.xz"
SRCURL="${URL}${SRCTGZ}"

__getsrc(){
    wget -c $SRCURL
}
__unpacksrc(){
    tar xf $SRCTGZ
}
__preparesrc(){
cat << EOF > config.toml
# see config.toml.example for more possible options
# See the 8.4 book for an example using shipped LLVM
# e.g. if not installing clang, or using a version before 10.0
[llvm]
# by default, rust will build for a myriad of architectures
targets = "X86"
# When using system llvm prefer shared libraries
link-shared = true
[build]
# omit docs to save time and space (default is to build them)
docs = false

# install cargo as well as rust
extended = true

[install]
prefix = "/usr"
docdir = "share/doc/rustc-1.47.0"

[rust]
channel = "stable"
rpath = false

# BLFS does not install the FileCheck executable from llvm,
# so disable codegen tests
codegen-tests = false

[target.x86_64-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"


EOF
}
__compilesrc(){
export CC=clang
export CXX=clang++
export RUSTFLAGS="$RUSTFLAGS -C link-args=-lffi" &&
python3 ./x.py build --exclude src/tools/miri
}
__installsrc(){
	export LIBSSH2_SYS_USE_PKG_CONFIG=1 &&
DESTDIR="$DEST" python3 ./x.py install &&
unset LIBSSH2_SYS_USE_PKG_CONFIG
}

pkg_preinstall(){
	# Remove hashed libraries installed by previous install
	hpkg-remove -f -p rustc
	true
}

